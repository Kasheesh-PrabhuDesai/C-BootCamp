Define a function that takes in two non-negative integers a and b and returns the last decimal digit of a^b. Note that a and b may be very large!

For example, the last decimal digit of 9^7 is 9, since 9^7 = 4782969. The last decimal digit of (2^200)^(2^300), which has over 10^92 decimal digits, is 6. Also, please take 0^0 to be 1.

You may assume that the input will always be valid.
Examples

last_digit("4", "1")            // returns 4
last_digit("4", "2")            // returns 6
last_digit("9", "7")            // returns 9    
last_digit("10","10000000000")  // returns 0

Remarks
JavaScript, C++, R, PureScript

Since these languages don't have native arbitrarily large integers, your arguments are going to be strings representing non-negative integers instead.






#include <string>
#include <cmath>

int last_digit(const std::string &str1, const std::string &str2) {
  if (str2 == "0")
    return 1;
  const int
    a1 = str1.back() - '0',
    bm4 = (str2.size() == 1 ? str2.back() - '0' : (str2[str2.size() - 2] - '0') * 10 + (str2.back() - '0')) % 4,
    b1 = bm4 != 0 ? bm4 : 4;
  return int(std::pow(a1, b1)) % 10;
}
